#!/usr/bin/env python
#
#    Copyright 2012, Jose Ignacio Galarza <igalarzab@gmail.com>.
#
#    This file is part of savi2mkv.
#
#    savi2mkv is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    savi2mkv is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with savi2mkv.  If not, see <http://www.gnu.org/licenses/>.
#

import glob
import logging
import os
import subprocess
import sys
from optparse import OptionParser, OptionGroup


# Global information
__uname__ = 'savi2mkv'
__long_name__ = 'Simple AVI to MKV converter'
__version__ = '0.1dev'
__author__ = 'Jose Ignacio Galarza'
__email__ = 'igalarzab@gmail.com'
__url__ = 'http://github.com/igalarzab/savi2mkv'
__license__ = 'GNU/GPLv3'


def show_authors(*args, **kwargs):
    'Show authors'
    print('%s v%s, %s' % (__name__, __version__, __long_name__))
    print('%s <%s>' % (__author__, __email__))
    print(__license__)
    sys.exit(0)


def shell_arguments():
    'Parse the arguments'
    parser = OptionParser()

    parser.add_option('-u', '--username', action='store', type='string',
            dest='username', help='username', metavar='U', default='Anonymous')

    # Print information
    info = OptionGroup(parser, 'Print information')

    info.add_option('-v', '--verbose', action='store_true',
            dest='verbose', help='be extra verbose', default=False)

    info.add_option('-a', '--authors', action='callback',
            callback=show_authors, help='show authors')

    parser.add_option_group(info)
    return parser


def check_mkvmerge():
    'Check if mkvmerge is installed'
    try:
        subprocess.check_call(['mkvmerge', '-V'], stdout=subprocess.PIPE)
    except OSError:
        return False

    return True


def analyze_path(obj):
    'Convert the obj file or dir'
    ab_path = os.path.abspath(obj)

    # Check if the path exists
    if not os.path.exists(ab_path):
        sys.stderr.write('The path "%s" doesn\'t exists\n' % obj)
        return False

    # If is a file, convert it directly; otherwise, transverse the dir
    if os.path.isfile(ab_path):
        convert_video(ab_path)
    elif os.path.isdir(ab_path):
        for f in glob.glob(ab_path + '/*.avi'):
            abs_f = os.path.join(ab_path, f)
            if os.path.isfile(abs_f):
                convert_video(abs_f)

    return True


def create_command(iname, oname, subtitles):
    'Creathe the mkvmerge command'
    all_subtitles = ''

    # Create the subtitles
    for subtitle in subtitles:
        if subtitle[0]:
            all_subtitles += ' --language "0:%s"' % subtitle[0]
        all_subtitles += ' --track-name "0:%s" "%s"' % (subtitle[1], subtitle[2])

    command = 'mkvmerge -o "%s" "%s" %s' % (oname, iname, all_subtitles)
    logging.info(command)
    return command


def language_code(lang):
    'Get the language code'
    values = {
        'spanish': 'es',
        'english': 'en'
        }

    return values.get(lang.lower(), None)


def find_subtitles(finput):
    'Find all the subtitles of the video'
    files = glob.glob(finput + '*.srt')
    languages = []

    for f in files:
        language = f[len(finput):-4].strip()
        if language:
            languages.append([language_code(language), language, f])

    return languages


def convert_video(finput):
    'Convert the AVI video to matroska'
    logging.info('Trying to convert %s file', finput)

    finput_without_ext = os.path.splitext(finput)[0]
    foutput = finput_without_ext + '.mkv'
    subs = find_subtitles(finput_without_ext)

    command = create_command(finput, foutput, subs)


if __name__ == '__main__':
    arg_parser = shell_arguments()
    (options, paths) = arg_parser.parse_args()

    # Configure the logging module
    if options.verbose:
        level = logging.INFO
    else:
        level = logging.WARNING

    logging.basicConfig(level=level,
        format='%(asctime)s %(levelname)s: %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S')

    if not check_mkvmerge():
        print('mkvtoolnix is not installed in your system')
        print('You need the mkvmerge command to run this script')
        sys.exit(-1)

    # If no files are provided, use the actual directory
    paths = paths or '.'

    for path in paths:
        analyze_path(path)

# vim: ai ts=4 sts=4 et sw=4
